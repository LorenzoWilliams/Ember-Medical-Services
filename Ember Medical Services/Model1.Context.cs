//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ember_Medical_Services
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Ember_medical_service_db : DbContext
    {
        public Ember_medical_service_db()
            : base("name=Ember_medical_service_db")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<Attempted_delpayment> Attempted_delpayment { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Nurse> Nurses { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Physician> Physicians { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<Receptionist> Receptionists { get; set; }
        public virtual DbSet<Visit> Visits { get; set; }
        public virtual DbSet<Appointment_View> Appointment_View { get; set; }
        public virtual DbSet<Female_Patients> Female_Patients { get; set; }
        public virtual DbSet<Nurses_Patient_View> Nurses_Patient_View { get; set; }
        public virtual DbSet<Paid_Patient> Paid_Patient { get; set; }
        public virtual DbSet<Patients_address> Patients_address { get; set; }
        public virtual DbSet<Patients_Age> Patients_Age { get; set; }
        public virtual DbSet<staff_members> staff_members { get; set; }
    
        [DbFunction("Ember_medical_service_db", "AppointmentRange")]
        public virtual IQueryable<AppointmentRange_Result> AppointmentRange(Nullable<System.DateTime> appointment1, Nullable<System.DateTime> appointment2)
        {
            var appointment1Parameter = appointment1.HasValue ?
                new ObjectParameter("Appointment1", appointment1) :
                new ObjectParameter("Appointment1", typeof(System.DateTime));
    
            var appointment2Parameter = appointment2.HasValue ?
                new ObjectParameter("Appointment2", appointment2) :
                new ObjectParameter("Appointment2", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AppointmentRange_Result>("[Ember_medical_service_db].[AppointmentRange](@Appointment1, @Appointment2)", appointment1Parameter, appointment2Parameter);
        }
    
        [DbFunction("Ember_medical_service_db", "AppointmentScheduled")]
        public virtual IQueryable<AppointmentScheduled_Result> AppointmentScheduled(Nullable<System.DateTime> date, Nullable<System.TimeSpan> time)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var timeParameter = time.HasValue ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AppointmentScheduled_Result>("[Ember_medical_service_db].[AppointmentScheduled](@Date, @Time)", dateParameter, timeParameter);
        }
    
        public virtual int DeletePhysician(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePhysician", iDParameter);
        }
    
        public virtual int InputPatients(string fname, string lname, string gender, Nullable<System.DateTime> dOB, string address, string email, string phone)
        {
            var fnameParameter = fname != null ?
                new ObjectParameter("Fname", fname) :
                new ObjectParameter("Fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("Lname", lname) :
                new ObjectParameter("Lname", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InputPatients", fnameParameter, lnameParameter, genderParameter, dOBParameter, addressParameter, emailParameter, phoneParameter);
        }
    
        public virtual ObjectResult<PatientsList_Result> PatientsList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PatientsList_Result>("PatientsList");
        }
    
        public virtual int UpdatePatientAddress(Nullable<int> iD, string address, string phone)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePatientAddress", iDParameter, addressParameter, phoneParameter);
        }
    }
}
